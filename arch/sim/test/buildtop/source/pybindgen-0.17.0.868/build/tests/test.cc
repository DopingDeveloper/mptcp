/* This file was generated by PyBindGen 0.17.0.868 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif



#include <string>
#include <stdint.h>

class Foo
{
    std::string m_datum;
public:
    Foo () : m_datum ("")
        {}
    Foo (std::string datum) : m_datum (datum)
        {}
    std::string get_datum () const { return m_datum; }

    Foo (Foo const & other) : m_datum (other.get_datum ())
        {}
};

typedef struct {
    PyObject_HEAD
    Foo *obj;
    PyBindGenWrapperFlags flags:8;
} PyFoo;
    

extern PyTypeObject PyFoo_Type;

/* Test PyObject * (<class 'pybindgen.typehandlers.pyobjecttype.PyObjectReturnValue'>) return type  */
static PyObject *
_test_wrapper_number_1()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyObject *retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    Py_INCREF((PyObject*) retval);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

static PyObject *
_test_wrapper_number_2()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyObject *retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test short unsigned int (<class 'pybindgen.typehandlers.inttype.UInt16Return'>) return type  */
static short unsigned int
_test_wrapper_number_3()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    short unsigned int retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test int (<class 'pybindgen.typehandlers.inttype.IntReturn'>) return type  */
static int
_test_wrapper_number_4()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    int retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return INT_MIN;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return INT_MIN;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test int32_t (<class 'pybindgen.typehandlers.inttype.IntReturn'>) return type  */
static int32_t
_test_wrapper_number_5()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    int32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return INT_MIN;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return INT_MIN;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test int64_t (<class 'pybindgen.typehandlers.inttype.LongLongReturn'>) return type  */
static int64_t
_test_wrapper_number_6()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    int64_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long unsigned int (<class 'pybindgen.typehandlers.inttype.UnsignedLongReturn'>) return type  */
static long unsigned int
_test_wrapper_number_7()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long unsigned int retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "k", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long long unsigned int (<class 'pybindgen.typehandlers.inttype.UnsignedLongLongReturn'>) return type  */
static long long unsigned int
_test_wrapper_number_8()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long long unsigned int retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long long & (<class 'pybindgen.typehandlers.inttype.LongLongRefReturn'>) return type  */
static long long &
_test_wrapper_number_9()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long long & retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test int16_t (<class 'pybindgen.typehandlers.inttype.Int16Return'>) return type  */
static int16_t
_test_wrapper_number_10()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    int16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 32767 || tmp < -32768) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long signed int (<class 'pybindgen.typehandlers.inttype.LongReturn'>) return type  */
static long signed int
_test_wrapper_number_11()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long signed int retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "l", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long int (<class 'pybindgen.typehandlers.inttype.LongReturn'>) return type  */
static long int
_test_wrapper_number_12()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long int retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "l", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test size_t (<class 'pybindgen.typehandlers.inttype.SizeTReturn'>) return type  */
static size_t
_test_wrapper_number_13()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    size_t retval;
    unsigned PY_LONG_LONG retval_tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &retval_tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = retval_tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test unsigned short int (<class 'pybindgen.typehandlers.inttype.UInt16Return'>) return type  */
static unsigned short int
_test_wrapper_number_14()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    unsigned short int retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test Foo (<class 'pybindgen.cppclass.ThisClassReturn'>) return type  */
static Foo
_test_wrapper_number_15()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyFoo *tmp_Foo;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return Foo();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyFoo_Type, &tmp_Foo)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return Foo();
    }
    Foo retval = *tmp_Foo->obj;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long long int (<class 'pybindgen.typehandlers.inttype.LongLongReturn'>) return type  */
static long long int
_test_wrapper_number_16()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long long int retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test int64_t & (<class 'pybindgen.typehandlers.inttype.LongLongRefReturn'>) return type  */
static int64_t &
_test_wrapper_number_17()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    int64_t & retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test Foo & (<class 'pybindgen.cppclass.ThisClassRefReturn'>) return type  */
/* Test short int (<class 'pybindgen.typehandlers.inttype.Int16Return'>) return type  */
static short int
_test_wrapper_number_18()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    short int retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 32767 || tmp < -32768) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test uint8_t (<class 'pybindgen.typehandlers.inttype.UInt8Return'>) return type  */
static uint8_t
_test_wrapper_number_19()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long (<class 'pybindgen.typehandlers.inttype.LongReturn'>) return type  */
static long
_test_wrapper_number_20()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "l", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test unsigned short (<class 'pybindgen.typehandlers.inttype.UInt16Return'>) return type  */
static unsigned short
_test_wrapper_number_21()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    unsigned short retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test bool (<class 'pybindgen.typehandlers.booltype.BoolReturn'>) return type  */
static bool
_test_wrapper_number_22()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return false;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return false;
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long long (<class 'pybindgen.typehandlers.inttype.LongLongReturn'>) return type  */
static long long
_test_wrapper_number_23()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long long retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test unsigned char (<class 'pybindgen.typehandlers.inttype.UInt8Return'>) return type  */
static unsigned char
_test_wrapper_number_24()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    unsigned char retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test float (<class 'pybindgen.typehandlers.floattype.FloatReturn'>) return type  */
static float
_test_wrapper_number_25()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    float retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test long long int & (<class 'pybindgen.typehandlers.inttype.LongLongRefReturn'>) return type  */
static long long int &
_test_wrapper_number_26()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    long long int & retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test std::string (<class 'pybindgen.typehandlers.stringtype.StdStringReturn'>) return type  */
static std::string
_test_wrapper_number_27()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    std::string retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return std::string();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return std::string();
    }
    retval = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test void (<class 'pybindgen.typehandlers.voidtype.VoidReturn'>) return type  */
static void
_test_wrapper_number_28()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test signed char (<class 'pybindgen.typehandlers.inttype.Int8Return'>) return type  */
static signed char
_test_wrapper_number_29()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    signed char retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 128 || tmp < -127) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test int8_t (<class 'pybindgen.typehandlers.inttype.Int8Return'>) return type  */
static int8_t
_test_wrapper_number_30()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    int8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 128 || tmp < -127) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test unsigned long (<class 'pybindgen.typehandlers.inttype.UnsignedLongReturn'>) return type  */
static unsigned long
_test_wrapper_number_31()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    unsigned long retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "k", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test std::size_t (<class 'pybindgen.typehandlers.inttype.SizeTReturn'>) return type  */
static std::size_t
_test_wrapper_number_32()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    std::size_t retval;
    unsigned PY_LONG_LONG retval_tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &retval_tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = retval_tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test signed long (<class 'pybindgen.typehandlers.inttype.LongReturn'>) return type  */
static signed long
_test_wrapper_number_33()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    signed long retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "l", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test unsigned int (<class 'pybindgen.typehandlers.inttype.UnsignedIntReturn'>) return type  */
static unsigned int
_test_wrapper_number_34()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    unsigned int retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test char (<class 'pybindgen.typehandlers.stringtype.CharReturn'>) return type  */
static char
_test_wrapper_number_35()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    char retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return '\0';
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "c", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return '\0';
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test short (<class 'pybindgen.typehandlers.inttype.Int16Return'>) return type  */
static short
_test_wrapper_number_36()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    short retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 32767 || tmp < -32768) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test Foo * (<class 'pybindgen.cppclass.ThisClassPtrReturn'>) return type  */
static Foo *
_test_wrapper_number_37()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    Foo *retval;
    PyFoo *tmp_Foo;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyFoo_Type, &tmp_Foo)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    retval = new Foo(*tmp_Foo->obj);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

static Foo *
_test_wrapper_number_38()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    Foo *retval;
    PyFoo *tmp_Foo;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyFoo_Type, &tmp_Foo)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    // dangerous!
    retval = tmp_Foo->obj;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test double (<class 'pybindgen.typehandlers.doubletype.DoubleReturn'>) return type  */
static double
_test_wrapper_number_39()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test char unsigned (<class 'pybindgen.typehandlers.inttype.UInt8Return'>) return type  */
static char unsigned
_test_wrapper_number_40()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    char unsigned retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test uint32_t (<class 'pybindgen.typehandlers.inttype.UnsignedIntReturn'>) return type  */
static uint32_t
_test_wrapper_number_41()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test unsigned long long (<class 'pybindgen.typehandlers.inttype.UnsignedLongLongReturn'>) return type  */
static unsigned long long
_test_wrapper_number_42()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    unsigned long long retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test char * (<class 'pybindgen.typehandlers.stringtype.CStringReturn'>) return type  */
static char *
_test_wrapper_number_43()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    char *retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "s", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return NULL;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test uint64_t (<class 'pybindgen.typehandlers.inttype.UnsignedLongLongReturn'>) return type  */
static uint64_t
_test_wrapper_number_44()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    uint64_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test uint16_t (<class 'pybindgen.typehandlers.inttype.UInt16Return'>) return type  */
static uint16_t
_test_wrapper_number_45()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return 0;
    }
    retval = tmp;
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

/* Test int & (<class 'pybindgen.typehandlers.inttype.IntRefParam'>) param type  */
static void
_test_wrapper_number_46(int & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test unsigned int * (<class 'pybindgen.typehandlers.inttype.UnsignedIntPtrParam'>) param type  */
static void
_test_wrapper_number_47(unsigned int *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test unsigned int & (<class 'pybindgen.typehandlers.inttype.UnsignedIntRefParam'>) param type  */
static void
_test_wrapper_number_48(unsigned int & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test int * (<class 'pybindgen.typehandlers.inttype.IntPtrParam'>) param type  */
static void
_test_wrapper_number_49(int *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test float * (<class 'pybindgen.typehandlers.floattype.FloatPtrParam'>) param type  */
static void
_test_wrapper_number_50(float *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test float & (<class 'pybindgen.typehandlers.floattype.FloatRefParam'>) param type  */
static void
_test_wrapper_number_51(float & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test unsigned & (<class 'pybindgen.typehandlers.inttype.UnsignedIntRefParam'>) param type  */
static void
_test_wrapper_number_52(unsigned & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test double & (<class 'pybindgen.typehandlers.doubletype.DoubleRefParam'>) param type  */
static void
_test_wrapper_number_53(double & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test uint8_t & (<class 'pybindgen.typehandlers.inttype.UInt8RefParam'>) param type  */
static void
_test_wrapper_number_54(uint8_t & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "B", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test std::string & (<class 'pybindgen.typehandlers.stringtype.StdStringRefParam'>) param type  */
static void
_test_wrapper_number_55(std::string & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    const char *param_out_ptr;
    Py_ssize_t param_out_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &param_out_ptr, &param_out_len)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    param_out = std::string(param_out_ptr, param_out_len);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test uint8_t * (<class 'pybindgen.typehandlers.inttype.UInt8PtrParam'>) param type  */
static void
_test_wrapper_number_56(uint8_t *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "B", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test std::string * (<class 'pybindgen.typehandlers.stringtype.StdStringPtrParam'>) param type  */
static void
_test_wrapper_number_57(std::string *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    const char *param_out_ptr;
    Py_ssize_t param_out_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &param_out_ptr, &param_out_len)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    *param_out = std::string(param_out_ptr, param_out_len);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test short unsigned int & (<class 'pybindgen.typehandlers.inttype.UInt16RefParam'>) param type  */
static void
_test_wrapper_number_58(short unsigned int & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "H", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test char unsigned & (<class 'pybindgen.typehandlers.inttype.UInt8RefParam'>) param type  */
static void
_test_wrapper_number_59(char unsigned & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "B", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test uint32_t * (<class 'pybindgen.typehandlers.inttype.UnsignedIntPtrParam'>) param type  */
static void
_test_wrapper_number_60(uint32_t *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test char signed & (<class 'pybindgen.typehandlers.inttype.Int8RefParam'>) param type  */
static void
_test_wrapper_number_61(char signed & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "b", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test uint16_t * (<class 'pybindgen.typehandlers.inttype.UnsignedInt16PtrParam'>) param type  */
static void
_test_wrapper_number_62(uint16_t *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "H", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test uint16_t & (<class 'pybindgen.typehandlers.inttype.UInt16RefParam'>) param type  */
static void
_test_wrapper_number_63(uint16_t & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "H", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test unsigned short int * (<class 'pybindgen.typehandlers.inttype.UnsignedInt16PtrParam'>) param type  */
static void
_test_wrapper_number_64(unsigned short int *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "H", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test unsigned short int & (<class 'pybindgen.typehandlers.inttype.UInt16RefParam'>) param type  */
static void
_test_wrapper_number_65(unsigned short int & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "H", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test short int & (<class 'pybindgen.typehandlers.inttype.Int16RefParam'>) param type  */
static void
_test_wrapper_number_66(short int & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "h", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test int16_t & (<class 'pybindgen.typehandlers.inttype.Int16RefParam'>) param type  */
static void
_test_wrapper_number_67(int16_t & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "h", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test short unsigned & (<class 'pybindgen.typehandlers.inttype.UInt16RefParam'>) param type  */
static void
_test_wrapper_number_68(short unsigned & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "H", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test short & (<class 'pybindgen.typehandlers.inttype.Int16RefParam'>) param type  */
static void
_test_wrapper_number_69(short & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "h", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test Foo & (<class 'pybindgen.cppclass.ThisClassRefParameter'>) param type  */
static void
_test_wrapper_number_70(Foo & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyFoo *py_Foo;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_Foo = PyObject_New(PyFoo, &PyFoo_Type);
    py_Foo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Foo->obj = &(param_out);
    py_retval = PyObject_CallFunction(NULL, (char *) "O", py_Foo);
    if (py_retval == NULL) {
        Py_DECREF(py_Foo);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        Py_DECREF(py_Foo);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_Foo->obj = NULL;
    Py_DECREF(py_retval);
    Py_DECREF(py_Foo);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test bool & (<class 'pybindgen.typehandlers.booltype.BoolRefParam'>) param type  */
static void
_test_wrapper_number_71(bool & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyObject *py_param_out;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    param_out = PyObject_IsTrue(py_param_out);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test bool * (<class 'pybindgen.typehandlers.booltype.BoolPtrParam'>) param type  */
static void
_test_wrapper_number_72(bool *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyObject *py_param_out;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    *param_out = PyObject_IsTrue(py_param_out);
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test int8_t & (<class 'pybindgen.typehandlers.inttype.Int8RefParam'>) param type  */
static void
_test_wrapper_number_73(int8_t & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "b", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test int8_t * (<class 'pybindgen.typehandlers.inttype.Int8PtrParam'>) param type  */
static void
_test_wrapper_number_74(int8_t *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "b", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test signed char & (<class 'pybindgen.typehandlers.inttype.Int8RefParam'>) param type  */
static void
_test_wrapper_number_75(signed char & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "b", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test Foo * (<class 'pybindgen.cppclass.ThisClassPtrParameter'>) param type  */
static void
_test_wrapper_number_76(Foo *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyFoo *py_Foo;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_Foo = PyObject_New(PyFoo, &PyFoo_Type);
    py_Foo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Foo->obj = param_out;
    py_retval = PyObject_CallFunction(NULL, (char *) "N", py_Foo);
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test Foo * (<class 'pybindgen.cppclass.ThisClassPtrParameter'>) param type  */
static void
_test_wrapper_number_77(Foo *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    PyFoo *py_Foo;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_Foo = PyObject_New(PyFoo, &PyFoo_Type);
    py_Foo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Foo->obj = new Foo(*param_out);
    py_retval = PyObject_CallFunction(NULL, (char *) "N", py_Foo);
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test double * (<class 'pybindgen.typehandlers.doubletype.DoublePtrParam'>) param type  */
static void
_test_wrapper_number_78(double *param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test unsigned char & (<class 'pybindgen.typehandlers.inttype.UInt8RefParam'>) param type  */
static void
_test_wrapper_number_79(unsigned char & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "B", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

/* Test unsigned short & (<class 'pybindgen.typehandlers.inttype.UInt16RefParam'>) param type  */
static void
_test_wrapper_number_80(unsigned short & param_out)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_retval = PyObject_CallFunction(NULL, (char *) "");
    if (py_retval == NULL) {
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "H", param_out)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

PyObject * foo_function_81(void);

short unsigned int foo_function_82(void);

int foo_function_83(void);

int32_t foo_function_84(void);

int64_t foo_function_85(void);

long unsigned int foo_function_86(void);

long long unsigned int foo_function_87(void);

long long & foo_function_88(void);

int16_t foo_function_89(void);

long signed int foo_function_90(void);

long int foo_function_91(void);

size_t foo_function_92(void);

unsigned short int foo_function_93(void);

Foo foo_function_94(void);

long long int foo_function_95(void);

int64_t & foo_function_96(void);

Foo & foo_function_97(void);

short int foo_function_98(void);

uint8_t foo_function_99(void);

long foo_function_100(void);

unsigned short foo_function_101(void);

bool foo_function_102(void);

long long foo_function_103(void);

unsigned char foo_function_104(void);

float foo_function_105(void);

long long int & foo_function_106(void);

std::string foo_function_107(void);

void foo_function_108(void);

signed char foo_function_109(void);

int8_t foo_function_110(void);

unsigned long foo_function_111(void);

std::size_t foo_function_112(void);

signed long foo_function_113(void);

unsigned int foo_function_114(void);

char foo_function_115(void);

short foo_function_116(void);

Foo * foo_function_117(void);

double foo_function_118(void);

char unsigned foo_function_119(void);

uint32_t foo_function_120(void);

unsigned long long foo_function_121(void);

char * foo_function_122(void);

uint64_t foo_function_123(void);

uint16_t foo_function_124(void);

void foo_function_125(long long &);

void foo_function_126(const size_t);

void foo_function_127(size_t);

void foo_function_128(int &);

void foo_function_129(int &);

void foo_function_130(int &);

void foo_function_131(const short int);

void foo_function_132(short int);

void foo_function_133(const unsigned int *);

void foo_function_134(unsigned int *);

void foo_function_135(unsigned int *);

void foo_function_136(unsigned int *);

void foo_function_137(signed long &);

void foo_function_138(unsigned int &);

void foo_function_139(unsigned int &);

void foo_function_140(unsigned int &);

void foo_function_141(const int *);

void foo_function_142(int *);

void foo_function_143(int *);

void foo_function_144(int *);

void foo_function_145(const char signed);

void foo_function_146(char signed);

void foo_function_147(const float *);

void foo_function_148(float *);

void foo_function_149(float *);

void foo_function_150(float *);

void foo_function_151(float &);

void foo_function_152(float &);

void foo_function_153(float &);

void foo_function_154(unsigned &);

void foo_function_155(unsigned &);

void foo_function_156(unsigned &);

void foo_function_157(const std::string);

void foo_function_158(std::string);

void foo_function_159(const unsigned long);

void foo_function_160(unsigned long);

void foo_function_161(signed long int &);

void foo_function_162(const long int);

void foo_function_163(long int);

void foo_function_164(const long long unsigned);

void foo_function_165(long long unsigned);

void foo_function_166(double &);

void foo_function_167(double &);

void foo_function_168(double &);

void foo_function_169(uint8_t &);

void foo_function_170(uint8_t &);

void foo_function_171(uint8_t &);

void foo_function_172(std::string &);

void foo_function_173(std::string &);

void foo_function_174(std::string &);

void foo_function_175(const uint8_t *);

void foo_function_176(uint8_t *);

void foo_function_177(uint8_t *);

void foo_function_178(uint8_t *);

void foo_function_179(const std::string *);

void foo_function_180(std::string *);

void foo_function_181(std::string *);

void foo_function_182(std::string *);

void foo_function_183(const char unsigned);

void foo_function_184(char unsigned);

void foo_function_185(long signed int &);

void foo_function_186(const signed char);

void foo_function_187(signed char);

void foo_function_188(const PyObject * param_transfer);

void foo_function_189(const PyObject * param_notransfer);

void foo_function_190(PyObject * param_transfer);

void foo_function_191(PyObject * param_notransfer);

void foo_function_192(short unsigned int &);

void foo_function_193(short unsigned int &);

void foo_function_194(short unsigned int &);

void foo_function_195(const unsigned long long int);

void foo_function_196(unsigned long long int);

void foo_function_197(const long unsigned int);

void foo_function_198(long unsigned int);

void foo_function_199(const int16_t);

void foo_function_200(int16_t);

void foo_function_201(const unsigned short int);

void foo_function_202(unsigned short int);

void foo_function_203(const Foo);

void foo_function_204(Foo);

void foo_function_205(char unsigned &);

void foo_function_206(char unsigned &);

void foo_function_207(char unsigned &);

void foo_function_208(const uint32_t *);

void foo_function_209(uint32_t *);

void foo_function_210(uint32_t *);

void foo_function_211(uint32_t *);

void foo_function_212(const long long);

void foo_function_213(long long);

void foo_function_214(long long int &);

void foo_function_215(long signed &);

void foo_function_216(const unsigned char);

void foo_function_217(unsigned char);

void foo_function_218(char signed &);

void foo_function_219(char signed &);

void foo_function_220(char signed &);

void foo_function_221(const uint16_t *);

void foo_function_222(uint16_t *);

void foo_function_223(uint16_t *);

void foo_function_224(uint16_t *);

void foo_function_225(uint16_t &);

void foo_function_226(uint16_t &);

void foo_function_227(uint16_t &);

void foo_function_228(const signed long);

void foo_function_229(signed long);

void foo_function_230(const unsigned int);

void foo_function_231(unsigned int);

void foo_function_232(const uint8_t);

void foo_function_233(uint8_t);

void foo_function_234(const unsigned long int);

void foo_function_235(unsigned long int);

void foo_function_236(unsigned long &);

void foo_function_237(long unsigned &);

void foo_function_238(const uint16_t);

void foo_function_239(uint16_t);

void foo_function_240(const int32_t);

void foo_function_241(int32_t);

void foo_function_242(const float);

void foo_function_243(float);

void foo_function_244(const unsigned short int *);

void foo_function_245(unsigned short int *);

void foo_function_246(unsigned short int *);

void foo_function_247(unsigned short int *);

void foo_function_248(unsigned short int &);

void foo_function_249(unsigned short int &);

void foo_function_250(unsigned short int &);

void foo_function_251(long long unsigned int &);

void foo_function_252(const long);

void foo_function_253(long);

void foo_function_254(const unsigned short);

void foo_function_255(unsigned short);

void foo_function_256(long &);

void foo_function_257(const long long int);

void foo_function_258(long long int);

void foo_function_259(const int8_t);

void foo_function_260(int8_t);

void foo_function_261(short int &);

void foo_function_262(short int &);

void foo_function_263(short int &);

void foo_function_264(const char);

void foo_function_265(char);

void foo_function_266(int16_t &);

void foo_function_267(int16_t &);

void foo_function_268(int16_t &);

void foo_function_269(short unsigned &);

void foo_function_270(short unsigned &);

void foo_function_271(short unsigned &);

void foo_function_272(unsigned long int &);

void foo_function_273(const signed long int);

void foo_function_274(signed long int);

void foo_function_275(const unsigned long long);

void foo_function_276(unsigned long long);

void foo_function_277(const uint64_t);

void foo_function_278(uint64_t);

void foo_function_279(const int);

void foo_function_280(int);

void foo_function_281(const std::size_t);

void foo_function_282(std::size_t);

void foo_function_283(const int64_t);

void foo_function_284(int64_t);

void foo_function_285(const long long unsigned int);

void foo_function_286(long long unsigned int);

void foo_function_287(const long signed int);

void foo_function_288(long signed int);

void foo_function_289(short &);

void foo_function_290(short &);

void foo_function_291(short &);

void foo_function_292(Foo &);

void foo_function_293(Foo &);

void foo_function_294(Foo &);

void foo_function_295(unsigned long long &);

void foo_function_296(const long unsigned);

void foo_function_297(long unsigned);

void foo_function_298(bool &);

void foo_function_299(bool &);

void foo_function_300(bool &);

void foo_function_301(const bool);

void foo_function_302(bool);

void foo_function_303(int64_t &);

void foo_function_304(const bool *);

void foo_function_305(bool *);

void foo_function_306(bool *);

void foo_function_307(bool *);

void foo_function_308(const uint32_t);

void foo_function_309(uint32_t);

void foo_function_310(int8_t &);

void foo_function_311(int8_t &);

void foo_function_312(int8_t &);

void foo_function_313(uint64_t &);

void foo_function_314(const int8_t *);

void foo_function_315(int8_t *);

void foo_function_316(int8_t *);

void foo_function_317(int8_t *);

void foo_function_318(long int &);

void foo_function_319(signed char &);

void foo_function_320(signed char &);

void foo_function_321(signed char &);

void foo_function_322(const short);

void foo_function_323(short);

void foo_function_324(const Foo * param_transfer);

void foo_function_325(const Foo * param_notransfer);

void foo_function_326(Foo * param_transfer);

void foo_function_327(Foo * param_notransfer);

void foo_function_328(Foo * param_out_transfer);

void foo_function_329(Foo * param_out_notransfer);

void foo_function_330(Foo * param_inout_transfer);

void foo_function_331(Foo * param_inout_notransfer);

void foo_function_332(const double *);

void foo_function_333(double *);

void foo_function_334(double *);

void foo_function_335(double *);

void foo_function_336(long unsigned int &);

void foo_function_337(const double);

void foo_function_338(double);

void foo_function_339(unsigned char &);

void foo_function_340(unsigned char &);

void foo_function_341(unsigned char &);

void foo_function_342(const char *);

void foo_function_343(char *);

void foo_function_344(const long signed);

void foo_function_345(long signed);

void foo_function_346(unsigned short &);

void foo_function_347(unsigned short &);

void foo_function_348(unsigned short &);

/* --- module functions --- */


PyObject *
_wrap_foo_foo_function_326(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_transfer;
    Foo *param_transfer_ptr;
    const char *keywords[] = {"param_transfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_transfer)) {
        return NULL;
    }
    param_transfer_ptr = (param_transfer ? param_transfer->obj : NULL);
    foo_function_326(param_transfer_ptr);
    if (param_transfer) {
        param_transfer->obj = NULL;
    }
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_326(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_131(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_131(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_131(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_130(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_130(param_inout);
    py_retval = Py_BuildValue((char *) "i", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_130(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_133(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_133(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_133(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_132(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_132(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_132(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_135()
{
    PyObject *py_retval;
    unsigned int param_out;

    foo_function_135(&param_out);
    py_retval = Py_BuildValue((char *) "I", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_135();


PyObject *
_wrap_foo_foo_function_134(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_134(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_134(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_137(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_137(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_137(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_136(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_136(&param_inout);
    py_retval = Py_BuildValue((char *) "I", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_136(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_139()
{
    PyObject *py_retval;
    unsigned int  param_out;

    foo_function_139(param_out);
    py_retval = Py_BuildValue((char *) "I", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_139();


PyObject *
_wrap_foo_foo_function_138(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_138(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_138(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_223()
{
    PyObject *py_retval;
    uint16_t param_out;

    foo_function_223(&param_out);
    py_retval = Py_BuildValue((char *) "H", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_223();


PyObject *
_wrap_foo_foo_function_222(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_222(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_222(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_225(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_225(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_225(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_224(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_224(&param_inout);
    py_retval = Py_BuildValue((char *) "H", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_224(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_227()
{
    PyObject *py_retval;
    uint16_t  param_out;

    foo_function_227(param_out);
    py_retval = Py_BuildValue((char *) "H", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_227();


PyObject *
_wrap_foo_foo_function_226(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_226(param_inout);
    py_retval = Py_BuildValue((char *) "H", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_226(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_308(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_308(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_308(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_309(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_309(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_309(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_319(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed char  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_319(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_319(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_302(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool param;
    PyObject *py_param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_param)) {
        return NULL;
    }
    param = (bool) PyObject_IsTrue(py_param);
    foo_function_302(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_302(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_88()
{
    PyObject *py_retval;
    long long & retval;

    retval = foo_function_88();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_88();


PyObject *
_wrap_foo_foo_function_300(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool param_inout;
    PyObject *py_param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_param_inout)) {
        return NULL;
    }
    param_inout = PyObject_IsTrue(py_param_inout);
    foo_function_300(param_inout);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(param_inout));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_300(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_301(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool param;
    PyObject *py_param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_param)) {
        return NULL;
    }
    param = (bool) PyObject_IsTrue(py_param);
    foo_function_301(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_301(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_306()
{
    PyObject *py_retval;
    bool  param_out;

    foo_function_306(&param_out);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(param_out));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_306();


PyObject *
_wrap_foo_foo_function_307(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool  param_inout;
    PyObject *py_param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_param_inout)) {
        return NULL;
    }
    param_inout = PyObject_IsTrue(py_param_inout);
    foo_function_307(&param_inout);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(param_inout));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_307(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_304(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool  param;
    PyObject *py_param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_param)) {
        return NULL;
    }
    param = PyObject_IsTrue(py_param);
    foo_function_304(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_304(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_89()
{
    PyObject *py_retval;
    int16_t retval;

    retval = foo_function_89();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_89();


PyObject *
_wrap_foo_foo_function_249(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned short int  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_249(param_inout);
    py_retval = Py_BuildValue((char *) "H", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_249(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_248(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned short int  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_248(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_248(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_247(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned short int param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_247(&param_inout);
    py_retval = Py_BuildValue((char *) "H", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_247(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_246()
{
    PyObject *py_retval;
    unsigned short int param_out;

    foo_function_246(&param_out);
    py_retval = Py_BuildValue((char *) "H", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_246();


PyObject *
_wrap_foo_foo_function_254(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_254(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_254(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_245(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned short int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_245(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_245(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_345(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long signed param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_345(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_345(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_244(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned short int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_244(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_244(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_343(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_343(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_343(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_242(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    float param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "f", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_242(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_242(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_144(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_144(&param_inout);
    py_retval = Py_BuildValue((char *) "i", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_144(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_145(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_145(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_145(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_146(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_146(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_146(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_147(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    float  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "f", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_147(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_147(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_140(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_140(param_inout);
    py_retval = Py_BuildValue((char *) "I", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_140(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_82()
{
    PyObject *py_retval;
    short unsigned int retval;

    retval = foo_function_82();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_82();


PyObject *
_wrap_foo_foo_function_142(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_142(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_142(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_143()
{
    PyObject *py_retval;
    int  param_out;

    foo_function_143(&param_out);
    py_retval = Py_BuildValue((char *) "i", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_143();


PyObject *
_wrap_foo_foo_function_97()
{
    PyObject *py_retval;
    PyFoo *py_Foo;

    Foo & retval = foo_function_97();
    py_Foo = PyObject_New(PyFoo, &PyFoo_Type);
    py_Foo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Foo->obj = new Foo(retval);
    py_retval = Py_BuildValue((char *) "N", py_Foo);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_97();


PyObject *
_wrap_foo_foo_function_96()
{
    PyObject *py_retval;
    int64_t & retval;

    retval = foo_function_96();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_96();


PyObject *
_wrap_foo_foo_function_95()
{
    PyObject *py_retval;
    long long int retval;

    retval = foo_function_95();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_95();


PyObject *
_wrap_foo_foo_function_158(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *param;
    Py_ssize_t param_len;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &param, &param_len)) {
        return NULL;
    }
    foo_function_158(std::string(param, param_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_158(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_148(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    float  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "f", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_148(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_148(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_149()
{
    PyObject *py_retval;
    float  param_out;

    foo_function_149(&param_out);
    py_retval = Py_BuildValue((char *) "f", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_149();


PyObject *
_wrap_foo_foo_function_91()
{
    PyObject *py_retval;
    long int retval;

    retval = foo_function_91();
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_91();


PyObject *
_wrap_foo_foo_function_90()
{
    PyObject *py_retval;
    long signed int retval;

    retval = foo_function_90();
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_90();


PyObject *
_wrap_foo_foo_function_294(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_inout)) {
        return NULL;
    }
    foo_function_294(*param_inout->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_294(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_251(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_251(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_251(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_313(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_313(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_313(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_230(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_230(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_230(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_327(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_notransfer;
    Foo *param_notransfer_ptr;
    const char *keywords[] = {"param_notransfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_notransfer)) {
        return NULL;
    }
    param_notransfer_ptr = (param_notransfer ? param_notransfer->obj : NULL);
    foo_function_327(param_notransfer_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_327(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_241(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int32_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_241(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_241(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_315(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int8_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_315(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_315(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_314(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int8_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_314(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_314(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_328(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_out_transfer;
    Foo *param_out_transfer_ptr;
    const char *keywords[] = {"param_out_transfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_out_transfer)) {
        return NULL;
    }
    param_out_transfer_ptr = (param_out_transfer ? param_out_transfer->obj : NULL);
    foo_function_328(param_out_transfer_ptr);
    if (param_out_transfer) {
        param_out_transfer->obj = NULL;
    }
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_328(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_317(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int8_t param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_317(&param_inout);
    py_retval = Py_BuildValue((char *) "b", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_317(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_346(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned short  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_346(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_346(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_157(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *param;
    Py_ssize_t param_len;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &param, &param_len)) {
        return NULL;
    }
    foo_function_157(std::string(param, param_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_157(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_156(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_156(param_inout);
    py_retval = Py_BuildValue((char *) "I", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_156(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_155()
{
    PyObject *py_retval;
    unsigned  param_out;

    foo_function_155(param_out);
    py_retval = Py_BuildValue((char *) "I", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_155();


PyObject *
_wrap_foo_foo_function_154(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_154(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_154(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_153(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    float  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "f", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_153(param_inout);
    py_retval = Py_BuildValue((char *) "f", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_153(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_152()
{
    PyObject *py_retval;
    float  param_out;

    foo_function_152(param_out);
    py_retval = Py_BuildValue((char *) "f", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_152();


PyObject *
_wrap_foo_foo_function_151(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    float  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "f", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_151(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_151(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_150(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    float  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "f", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_150(&param_inout);
    py_retval = Py_BuildValue((char *) "f", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_150(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_84()
{
    PyObject *py_retval;
    int32_t retval;

    retval = foo_function_84();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_84();


PyObject *
_wrap_foo_foo_function_85()
{
    PyObject *py_retval;
    int64_t retval;

    retval = foo_function_85();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_85();


PyObject *
_wrap_foo_foo_function_86()
{
    PyObject *py_retval;
    long unsigned int retval;

    retval = foo_function_86();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_86();


PyObject *
_wrap_foo_foo_function_87()
{
    PyObject *py_retval;
    long long unsigned int retval;

    retval = foo_function_87();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_87();


PyObject *
_wrap_foo_foo_function_243(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    float param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "f", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_243(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_243(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_81()
{
    PyObject *py_retval;
    PyObject *retval;

    retval = foo_function_81();
    py_retval = Py_BuildValue((char *) "N", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_81();


PyObject *
_wrap_foo_foo_function_159(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_159(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_159(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_83()
{
    PyObject *py_retval;
    int retval;

    retval = foo_function_83();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_83();


PyObject *
_wrap_foo_foo_function_229(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_229(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_229(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_99()
{
    PyObject *py_retval;
    uint8_t retval;

    retval = foo_function_99();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_99();


PyObject *
_wrap_foo_foo_function_228(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_228(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_228(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_278(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_278(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_278(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_318(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_318(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_318(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_98()
{
    PyObject *py_retval;
    short int retval;

    retval = foo_function_98();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_98();


PyObject *
_wrap_foo_foo_function_347(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned short  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_347(param_inout);
    py_retval = Py_BuildValue((char *) "H", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_347(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_250()
{
    PyObject *py_retval;
    unsigned short int  param_out;

    foo_function_250(param_out);
    py_retval = Py_BuildValue((char *) "H", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_250();


PyObject *
_wrap_foo_foo_function_255(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_255(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_255(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_256(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_256(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_256(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_94()
{
    PyObject *py_retval;
    PyFoo *py_Foo;

    Foo retval = foo_function_94();
    py_Foo = PyObject_New(PyFoo, &PyFoo_Type);
    py_Foo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Foo->obj = new Foo(retval);
    py_retval = Py_BuildValue((char *) "N", py_Foo);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_94();


PyObject *
_wrap_foo_foo_function_279(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_279(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_279(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_93()
{
    PyObject *py_retval;
    unsigned short int retval;

    retval = foo_function_93();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_93();


PyObject *
_wrap_foo_foo_function_344(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long signed param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_344(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_344(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_316()
{
    PyObject *py_retval;
    int8_t param_out;

    foo_function_316(&param_out);
    py_retval = Py_BuildValue((char *) "b", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_316();


PyObject *
_wrap_foo_foo_function_92()
{
    PyObject *py_retval;
    size_t retval;

    retval = foo_function_92();
    py_retval = Py_BuildValue((char *) "K", ((unsigned PY_LONG_LONG) retval));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_92();


PyObject *
_wrap_foo_foo_function_162(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_162(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_162(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_163(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_163(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_163(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_160(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_160(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_160(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_161(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_161(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_161(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_166(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_166(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_166(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_167()
{
    PyObject *py_retval;
    double param_out;

    foo_function_167(param_out);
    py_retval = Py_BuildValue((char *) "d", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_167();


PyObject *
_wrap_foo_foo_function_164(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long unsigned param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_164(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_164(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_165(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long unsigned param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_165(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_165(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_272(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_272(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_272(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_273(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_273(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_273(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_168(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_168(param_inout);
    py_retval = Py_BuildValue((char *) "d", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_168(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_169(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_169(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_169(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_276(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_276(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_276(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_277(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_277(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_277(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_274(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_274(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_274(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_275(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_275(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_275(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_180(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *param;
    Py_ssize_t param_len;
    std::string param_std;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &param, &param_len)) {
        return NULL;
    }
    param_std = std::string(param, param_len);
    foo_function_180(&param_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_180(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_181()
{
    PyObject *py_retval;
    const char *param_out;
    Py_ssize_t param_out_len;
    std::string param_out_std;

    foo_function_181(&param_out_std);
    py_retval = Py_BuildValue((char *) "s#", (param_out_std).c_str(), (param_out_std).size());
    return py_retval;
}
PyObject * _wrap_foo_foo_function_181();


PyObject *
_wrap_foo_foo_function_182(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *param_inout;
    Py_ssize_t param_inout_len;
    std::string param_inout_std;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &param_inout, &param_inout_len)) {
        return NULL;
    }
    param_inout_std = std::string(param_inout, param_inout_len);
    foo_function_182(&param_inout_std);
    py_retval = Py_BuildValue((char *) "s#", (param_inout_std).c_str(), (param_inout_std).size());
    return py_retval;
}
PyObject * _wrap_foo_foo_function_182(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_183(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_183(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_183(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_184(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_184(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_184(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_185(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long signed int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_185(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_185(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_186(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_186(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_186(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_187(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_187(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_187(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_188(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *param_transfer;
    const char *keywords[] = {"param_transfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &param_transfer)) {
        return NULL;
    }
    Py_INCREF((PyObject*) param_transfer);
    foo_function_188(param_transfer);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_188(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_189(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *param_notransfer;
    const char *keywords[] = {"param_notransfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &param_notransfer)) {
        return NULL;
    }
    foo_function_189(param_notransfer);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_189(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_252(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_252(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_252(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_334()
{
    PyObject *py_retval;
    double  param_out;

    foo_function_334(&param_out);
    py_retval = Py_BuildValue((char *) "d", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_334();


PyObject *
_wrap_foo_foo_function_340(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned char  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_340(param_inout);
    py_retval = Py_BuildValue((char *) "B", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_340(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_329(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_out_notransfer;
    Foo *param_out_notransfer_ptr;
    const char *keywords[] = {"param_out_notransfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_out_notransfer)) {
        return NULL;
    }
    param_out_notransfer_ptr = (param_out_notransfer ? param_out_notransfer->obj : NULL);
    foo_function_329(param_out_notransfer_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_329(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_341()
{
    PyObject *py_retval;
    unsigned char  param_out;

    foo_function_341(param_out);
    py_retval = Py_BuildValue((char *) "B", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_341();


PyObject *
_wrap_foo_foo_function_179(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *param;
    Py_ssize_t param_len;
    std::string param_std;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &param, &param_len)) {
        return NULL;
    }
    param_std = std::string(param, param_len);
    foo_function_179(&param_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_179(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_178(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_178(&param_inout);
    py_retval = Py_BuildValue((char *) "B", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_178(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_348()
{
    PyObject *py_retval;
    unsigned short  param_out;

    foo_function_348(param_out);
    py_retval = Py_BuildValue((char *) "H", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_348();


PyObject *
_wrap_foo_foo_function_342(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_342(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_342(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_175(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_175(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_175(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_174(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *param_inout;
    Py_ssize_t param_inout_len;
    std::string param_inout_std;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &param_inout, &param_inout_len)) {
        return NULL;
    }
    param_inout_std = std::string(param_inout, param_inout_len);
    foo_function_174(param_inout_std);
    py_retval = Py_BuildValue((char *) "s#", (param_inout_std).c_str(), (param_inout_std).size());
    return py_retval;
}
PyObject * _wrap_foo_foo_function_174(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_177()
{
    PyObject *py_retval;
    uint8_t param_out;

    foo_function_177(&param_out);
    py_retval = Py_BuildValue((char *) "B", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_177();


PyObject *
_wrap_foo_foo_function_176(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_176(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_176(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_171()
{
    PyObject *py_retval;
    uint8_t  param_out;

    foo_function_171(param_out);
    py_retval = Py_BuildValue((char *) "B", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_171();


PyObject *
_wrap_foo_foo_function_170(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_170(param_inout);
    py_retval = Py_BuildValue((char *) "B", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_170(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_173()
{
    PyObject *py_retval;
    const char *param_out;
    Py_ssize_t param_out_len;
    std::string param_out_std;

    foo_function_173(param_out_std);
    py_retval = Py_BuildValue((char *) "s#", (param_out_std).c_str(), (param_out_std).size());
    return py_retval;
}
PyObject * _wrap_foo_foo_function_173();


PyObject *
_wrap_foo_foo_function_172(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *param;
    Py_ssize_t param_len;
    std::string param_std;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &param, &param_len)) {
        return NULL;
    }
    param_std = std::string(param, param_len);
    foo_function_172(param_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_172(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_265(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "c", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_265(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_265(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_264(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "c", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_264(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_264(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_267(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int16_t  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "h", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_267(param_inout);
    py_retval = Py_BuildValue((char *) "h", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_267(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_266(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int16_t  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "h", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_266(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_266(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_261(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short int  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "h", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_261(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_261(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_260(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_260(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_260(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_263()
{
    PyObject *py_retval;
    short int  param_out;

    foo_function_263(param_out);
    py_retval = Py_BuildValue((char *) "h", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_263();


PyObject *
_wrap_foo_foo_function_262(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short int  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "h", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_262(param_inout);
    py_retval = Py_BuildValue((char *) "h", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_262(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_269(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short unsigned  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_269(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_269(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_268()
{
    PyObject *py_retval;
    int16_t  param_out;

    foo_function_268(param_out);
    py_retval = Py_BuildValue((char *) "h", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_268();


PyObject *
_wrap_foo_foo_function_312()
{
    PyObject *py_retval;
    int8_t  param_out;

    foo_function_312(param_out);
    py_retval = Py_BuildValue((char *) "b", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_312();


PyObject *
_wrap_foo_foo_function_193(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short unsigned int  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_193(param_inout);
    py_retval = Py_BuildValue((char *) "H", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_193(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_192(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short unsigned int  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_192(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_192(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_191(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *param_notransfer;
    const char *keywords[] = {"param_notransfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &param_notransfer)) {
        return NULL;
    }
    foo_function_191(param_notransfer);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_191(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_190(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *param_transfer;
    const char *keywords[] = {"param_transfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &param_transfer)) {
        return NULL;
    }
    Py_INCREF((PyObject*) param_transfer);
    foo_function_190(param_transfer);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_190(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_197(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_197(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_197(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_196(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_196(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_196(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_195(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_195(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_195(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_194()
{
    PyObject *py_retval;
    short unsigned int  param_out;

    foo_function_194(param_out);
    py_retval = Py_BuildValue((char *) "H", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_194();


PyObject *
_wrap_foo_foo_function_258(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_258(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_258(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_199(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_199(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_199(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_198(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_198(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_198(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_298(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool param;
    PyObject *py_param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_param)) {
        return NULL;
    }
    param = PyObject_IsTrue(py_param);
    foo_function_298(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_298(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_299()
{
    PyObject *py_retval;
    bool param_out;

    foo_function_299(param_out);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(param_out));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_299();


PyObject *
_wrap_foo_foo_function_303(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_303(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_303(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_290(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "h", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_290(param_inout);
    py_retval = Py_BuildValue((char *) "h", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_290(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_291()
{
    PyObject *py_retval;
    short  param_out;

    foo_function_291(param_out);
    py_retval = Py_BuildValue((char *) "h", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_291();


PyObject *
_wrap_foo_foo_function_292(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param)) {
        return NULL;
    }
    foo_function_292(*((PyFoo *) param)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_292(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_293()
{
    PyObject *py_retval;
    PyFoo *param_out;

    param_out = PyObject_New(PyFoo, &PyFoo_Type);
    param_out->obj = new Foo();
    foo_function_293(*param_out->obj);
    param_out->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_293();


PyObject *
_wrap_foo_foo_function_280(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_280(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_280(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_295(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_295(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_295(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_296(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long unsigned param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_296(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_296(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_297(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long unsigned param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_297(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_297(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_108()
{
    PyObject *py_retval;

    foo_function_108();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_108();


PyObject *
_wrap_foo_foo_function_109()
{
    PyObject *py_retval;
    signed char retval;

    retval = foo_function_109();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_109();


PyObject *
_wrap_foo_foo_function_257(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_257(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_257(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_240(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int32_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_240(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_240(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_238(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_238(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_238(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_100()
{
    PyObject *py_retval;
    long retval;

    retval = foo_function_100();
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_100();


PyObject *
_wrap_foo_foo_function_101()
{
    PyObject *py_retval;
    unsigned short retval;

    retval = foo_function_101();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_101();


PyObject *
_wrap_foo_foo_function_102()
{
    PyObject *py_retval;
    bool retval;

    retval = foo_function_102();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_102();


PyObject *
_wrap_foo_foo_function_103()
{
    PyObject *py_retval;
    long long retval;

    retval = foo_function_103();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_103();


PyObject *
_wrap_foo_foo_function_104()
{
    PyObject *py_retval;
    unsigned char retval;

    retval = foo_function_104();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_104();


PyObject *
_wrap_foo_foo_function_105()
{
    PyObject *py_retval;
    float retval;

    retval = foo_function_105();
    py_retval = Py_BuildValue((char *) "f", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_105();


PyObject *
_wrap_foo_foo_function_106()
{
    PyObject *py_retval;
    long long int & retval;

    retval = foo_function_106();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_106();


PyObject *
_wrap_foo_foo_function_107()
{
    PyObject *py_retval;
    std::string retval;

    retval = foo_function_107();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}
PyObject * _wrap_foo_foo_function_107();


PyObject *
_wrap_foo_foo_function_210()
{
    PyObject *py_retval;
    uint32_t param_out;

    foo_function_210(&param_out);
    py_retval = Py_BuildValue((char *) "I", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_210();


PyObject *
_wrap_foo_foo_function_211(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_211(&param_inout);
    py_retval = Py_BuildValue((char *) "I", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_211(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_212(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_212(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_212(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_213(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_213(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_213(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_214(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_214(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_214(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_215(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long signed param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_215(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_215(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_216(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_216(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_216(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_217(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_217(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_217(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_218(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char signed  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_218(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_218(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_219(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char signed  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_219(param_inout);
    py_retval = Py_BuildValue((char *) "b", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_219(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_305(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool  param;
    PyObject *py_param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_param)) {
        return NULL;
    }
    param = PyObject_IsTrue(py_param);
    foo_function_305(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_305(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_234(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_234(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_234(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_310(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int8_t  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_310(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_310(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_311(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int8_t  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_311(param_inout);
    py_retval = Py_BuildValue((char *) "b", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_311(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_141(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_141(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_141(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_289(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "h", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_289(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_289(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_288(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long signed int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_288(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_288(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_220()
{
    PyObject *py_retval;
    char signed  param_out;

    foo_function_220(param_out);
    py_retval = Py_BuildValue((char *) "b", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_220();


PyObject *
_wrap_foo_foo_function_283(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_283(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_283(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_282(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned PY_LONG_LONG param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_282(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_282(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_281(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned PY_LONG_LONG param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_281(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_281(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_231(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_231(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_231(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_287(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long signed int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_287(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_287(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_286(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_286(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_286(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_285(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_285(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_285(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_284(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_284(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_284(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_119()
{
    PyObject *py_retval;
    char unsigned retval;

    retval = foo_function_119();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_119();


PyObject *
_wrap_foo_foo_function_118()
{
    PyObject *py_retval;
    double retval;

    retval = foo_function_118();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_118();


PyObject *
_wrap_foo_foo_function_113()
{
    PyObject *py_retval;
    signed long retval;

    retval = foo_function_113();
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_113();


PyObject *
_wrap_foo_foo_function_112()
{
    PyObject *py_retval;
    std::size_t retval;

    retval = foo_function_112();
    py_retval = Py_BuildValue((char *) "K", ((unsigned PY_LONG_LONG) retval));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_112();


PyObject *
_wrap_foo_foo_function_111()
{
    PyObject *py_retval;
    unsigned long retval;

    retval = foo_function_111();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_111();


PyObject *
_wrap_foo_foo_function_110()
{
    PyObject *py_retval;
    int8_t retval;

    retval = foo_function_110();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_110();


PyObject *
_wrap_foo_foo_function_117()
{
    PyObject *py_retval;
    Foo *retval;
    PyFoo *py_Foo;

    retval = foo_function_117();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Foo = PyObject_New(PyFoo, &PyFoo_Type);
    py_Foo->obj = retval;
    py_Foo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Foo);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_117();


PyObject *
_wrap_foo_foo_function_116()
{
    PyObject *py_retval;
    short retval;

    retval = foo_function_116();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_116();


PyObject *
_wrap_foo_foo_function_115()
{
    PyObject *py_retval;
    char retval;

    retval = foo_function_115();
    py_retval = Py_BuildValue((char *) "c", (int) retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_115();


PyObject *
_wrap_foo_foo_function_114()
{
    PyObject *py_retval;
    unsigned int retval;

    retval = foo_function_114();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_114();


PyObject *
_wrap_foo_foo_function_203(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param)) {
        return NULL;
    }
    foo_function_203(*((PyFoo *) param)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_203(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_202(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_202(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_202(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_201(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_201(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_201(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_200(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_200(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_200(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_207()
{
    PyObject *py_retval;
    char unsigned  param_out;

    foo_function_207(param_out);
    py_retval = Py_BuildValue((char *) "B", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_207();


PyObject *
_wrap_foo_foo_function_206(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char unsigned  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_206(param_inout);
    py_retval = Py_BuildValue((char *) "B", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_206(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_205(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char unsigned  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_205(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_205(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_204(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param)) {
        return NULL;
    }
    foo_function_204(*((PyFoo *) param)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_204(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_324(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_transfer;
    Foo *param_transfer_ptr;
    const char *keywords[] = {"param_transfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_transfer)) {
        return NULL;
    }
    param_transfer_ptr = (param_transfer ? param_transfer->obj : NULL);
    foo_function_324(param_transfer_ptr);
    if (param_transfer) {
        param_transfer->obj = NULL;
    }
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_324(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_325(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_notransfer;
    Foo *param_notransfer_ptr;
    const char *keywords[] = {"param_notransfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_notransfer)) {
        return NULL;
    }
    param_notransfer_ptr = (param_notransfer ? param_notransfer->obj : NULL);
    foo_function_325(param_notransfer_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_325(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_209(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_209(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_209(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_208(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_208(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_208(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_320(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    signed char  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "b", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_320(param_inout);
    py_retval = Py_BuildValue((char *) "b", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_320(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_321()
{
    PyObject *py_retval;
    signed char  param_out;

    foo_function_321(param_out);
    py_retval = Py_BuildValue((char *) "b", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_321();


PyObject *
_wrap_foo_foo_function_322(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_322(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_322(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_323(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_323(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_323(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_253(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_253(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_253(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_239(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_239(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_239(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_271()
{
    PyObject *py_retval;
    short unsigned  param_out;

    foo_function_271(param_out);
    py_retval = Py_BuildValue((char *) "H", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_271();


PyObject *
_wrap_foo_foo_function_270(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    short unsigned  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_270(param_inout);
    py_retval = Py_BuildValue((char *) "H", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_270(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_126(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned PY_LONG_LONG param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_126(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_126(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_127(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned PY_LONG_LONG param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_127(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_127(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_124()
{
    PyObject *py_retval;
    uint16_t retval;

    retval = foo_function_124();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_124();


PyObject *
_wrap_foo_foo_function_125(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_125(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_125(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_122()
{
    PyObject *py_retval;
    char *retval;

    retval = foo_function_122();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_122();


PyObject *
_wrap_foo_foo_function_123()
{
    PyObject *py_retval;
    uint64_t retval;

    retval = foo_function_123();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_123();


PyObject *
_wrap_foo_foo_function_120()
{
    PyObject *py_retval;
    uint32_t retval;

    retval = foo_function_120();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_foo_foo_function_120();


PyObject *
_wrap_foo_foo_function_121()
{
    PyObject *py_retval;
    unsigned long long retval;

    retval = foo_function_121();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_121();


PyObject *
_wrap_foo_foo_function_236(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_236(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_236(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_237(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long unsigned param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_237(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_237(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_221(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "H", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_221(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_221(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_235(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_235(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_235(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_232(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_232(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_232(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_233(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_233(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_233(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_128(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_128(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_128(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_129()
{
    PyObject *py_retval;
    int  param_out;

    foo_function_129(param_out);
    py_retval = Py_BuildValue((char *) "i", param_out);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_129();


PyObject *
_wrap_foo_foo_function_339(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned char  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "B", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_339(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_339(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_338(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_338(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_338(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_337(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_337(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_337(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_336(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long unsigned int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_336(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_336(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_335(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double  param_inout;
    const char *keywords[] = {"param_inout", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &param_inout)) {
        return NULL;
    }
    foo_function_335(&param_inout);
    py_retval = Py_BuildValue((char *) "d", param_inout);
    return py_retval;
}
PyObject * _wrap_foo_foo_function_335(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_330(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_inout_transfer;
    Foo *param_inout_transfer_ptr;
    const char *keywords[] = {"param_inout_transfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_inout_transfer)) {
        return NULL;
    }
    param_inout_transfer_ptr = (param_inout_transfer ? param_inout_transfer->obj : NULL);
    foo_function_330(param_inout_transfer_ptr);
    if (param_inout_transfer) {
        param_inout_transfer->obj = NULL;
    }
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_330(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_333(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_333(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_333(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_332(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double  param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &param)) {
        return NULL;
    }
    foo_function_332(&param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_332(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_331(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyFoo *param_inout_notransfer;
    Foo *param_inout_notransfer_ptr;
    const char *keywords[] = {"param_inout_notransfer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyFoo_Type, &param_inout_notransfer)) {
        return NULL;
    }
    param_inout_notransfer_ptr = (param_inout_notransfer ? param_inout_notransfer->obj : NULL);
    foo_function_331(param_inout_notransfer_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_331(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_foo_foo_function_259(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int param;
    const char *keywords[] = {"param", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &param)) {
        return NULL;
    }
    if (param > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    foo_function_259(param);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_foo_foo_function_259(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);

static PyMethodDef foo_functions[] = {
    {(char *) "function_326", (PyCFunction) _wrap_foo_foo_function_326, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_131", (PyCFunction) _wrap_foo_foo_function_131, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_130", (PyCFunction) _wrap_foo_foo_function_130, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_133", (PyCFunction) _wrap_foo_foo_function_133, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_132", (PyCFunction) _wrap_foo_foo_function_132, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_135", (PyCFunction) _wrap_foo_foo_function_135, METH_NOARGS, NULL },
    {(char *) "function_134", (PyCFunction) _wrap_foo_foo_function_134, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_137", (PyCFunction) _wrap_foo_foo_function_137, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_136", (PyCFunction) _wrap_foo_foo_function_136, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_139", (PyCFunction) _wrap_foo_foo_function_139, METH_NOARGS, NULL },
    {(char *) "function_138", (PyCFunction) _wrap_foo_foo_function_138, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_223", (PyCFunction) _wrap_foo_foo_function_223, METH_NOARGS, NULL },
    {(char *) "function_222", (PyCFunction) _wrap_foo_foo_function_222, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_225", (PyCFunction) _wrap_foo_foo_function_225, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_224", (PyCFunction) _wrap_foo_foo_function_224, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_227", (PyCFunction) _wrap_foo_foo_function_227, METH_NOARGS, NULL },
    {(char *) "function_226", (PyCFunction) _wrap_foo_foo_function_226, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_308", (PyCFunction) _wrap_foo_foo_function_308, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_309", (PyCFunction) _wrap_foo_foo_function_309, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_319", (PyCFunction) _wrap_foo_foo_function_319, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_302", (PyCFunction) _wrap_foo_foo_function_302, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_88", (PyCFunction) _wrap_foo_foo_function_88, METH_NOARGS, NULL },
    {(char *) "function_300", (PyCFunction) _wrap_foo_foo_function_300, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_301", (PyCFunction) _wrap_foo_foo_function_301, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_306", (PyCFunction) _wrap_foo_foo_function_306, METH_NOARGS, NULL },
    {(char *) "function_307", (PyCFunction) _wrap_foo_foo_function_307, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_304", (PyCFunction) _wrap_foo_foo_function_304, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_89", (PyCFunction) _wrap_foo_foo_function_89, METH_NOARGS, NULL },
    {(char *) "function_249", (PyCFunction) _wrap_foo_foo_function_249, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_248", (PyCFunction) _wrap_foo_foo_function_248, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_247", (PyCFunction) _wrap_foo_foo_function_247, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_246", (PyCFunction) _wrap_foo_foo_function_246, METH_NOARGS, NULL },
    {(char *) "function_254", (PyCFunction) _wrap_foo_foo_function_254, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_245", (PyCFunction) _wrap_foo_foo_function_245, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_345", (PyCFunction) _wrap_foo_foo_function_345, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_244", (PyCFunction) _wrap_foo_foo_function_244, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_343", (PyCFunction) _wrap_foo_foo_function_343, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_242", (PyCFunction) _wrap_foo_foo_function_242, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_144", (PyCFunction) _wrap_foo_foo_function_144, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_145", (PyCFunction) _wrap_foo_foo_function_145, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_146", (PyCFunction) _wrap_foo_foo_function_146, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_147", (PyCFunction) _wrap_foo_foo_function_147, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_140", (PyCFunction) _wrap_foo_foo_function_140, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_82", (PyCFunction) _wrap_foo_foo_function_82, METH_NOARGS, NULL },
    {(char *) "function_142", (PyCFunction) _wrap_foo_foo_function_142, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_143", (PyCFunction) _wrap_foo_foo_function_143, METH_NOARGS, NULL },
    {(char *) "function_97", (PyCFunction) _wrap_foo_foo_function_97, METH_NOARGS, NULL },
    {(char *) "function_96", (PyCFunction) _wrap_foo_foo_function_96, METH_NOARGS, NULL },
    {(char *) "function_95", (PyCFunction) _wrap_foo_foo_function_95, METH_NOARGS, NULL },
    {(char *) "function_158", (PyCFunction) _wrap_foo_foo_function_158, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_148", (PyCFunction) _wrap_foo_foo_function_148, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_149", (PyCFunction) _wrap_foo_foo_function_149, METH_NOARGS, NULL },
    {(char *) "function_91", (PyCFunction) _wrap_foo_foo_function_91, METH_NOARGS, NULL },
    {(char *) "function_90", (PyCFunction) _wrap_foo_foo_function_90, METH_NOARGS, NULL },
    {(char *) "function_294", (PyCFunction) _wrap_foo_foo_function_294, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_251", (PyCFunction) _wrap_foo_foo_function_251, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_313", (PyCFunction) _wrap_foo_foo_function_313, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_230", (PyCFunction) _wrap_foo_foo_function_230, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_327", (PyCFunction) _wrap_foo_foo_function_327, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_241", (PyCFunction) _wrap_foo_foo_function_241, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_315", (PyCFunction) _wrap_foo_foo_function_315, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_314", (PyCFunction) _wrap_foo_foo_function_314, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_328", (PyCFunction) _wrap_foo_foo_function_328, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_317", (PyCFunction) _wrap_foo_foo_function_317, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_346", (PyCFunction) _wrap_foo_foo_function_346, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_157", (PyCFunction) _wrap_foo_foo_function_157, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_156", (PyCFunction) _wrap_foo_foo_function_156, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_155", (PyCFunction) _wrap_foo_foo_function_155, METH_NOARGS, NULL },
    {(char *) "function_154", (PyCFunction) _wrap_foo_foo_function_154, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_153", (PyCFunction) _wrap_foo_foo_function_153, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_152", (PyCFunction) _wrap_foo_foo_function_152, METH_NOARGS, NULL },
    {(char *) "function_151", (PyCFunction) _wrap_foo_foo_function_151, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_150", (PyCFunction) _wrap_foo_foo_function_150, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_84", (PyCFunction) _wrap_foo_foo_function_84, METH_NOARGS, NULL },
    {(char *) "function_85", (PyCFunction) _wrap_foo_foo_function_85, METH_NOARGS, NULL },
    {(char *) "function_86", (PyCFunction) _wrap_foo_foo_function_86, METH_NOARGS, NULL },
    {(char *) "function_87", (PyCFunction) _wrap_foo_foo_function_87, METH_NOARGS, NULL },
    {(char *) "function_243", (PyCFunction) _wrap_foo_foo_function_243, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_81", (PyCFunction) _wrap_foo_foo_function_81, METH_NOARGS, NULL },
    {(char *) "function_159", (PyCFunction) _wrap_foo_foo_function_159, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_83", (PyCFunction) _wrap_foo_foo_function_83, METH_NOARGS, NULL },
    {(char *) "function_229", (PyCFunction) _wrap_foo_foo_function_229, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_99", (PyCFunction) _wrap_foo_foo_function_99, METH_NOARGS, NULL },
    {(char *) "function_228", (PyCFunction) _wrap_foo_foo_function_228, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_278", (PyCFunction) _wrap_foo_foo_function_278, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_318", (PyCFunction) _wrap_foo_foo_function_318, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_98", (PyCFunction) _wrap_foo_foo_function_98, METH_NOARGS, NULL },
    {(char *) "function_347", (PyCFunction) _wrap_foo_foo_function_347, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_250", (PyCFunction) _wrap_foo_foo_function_250, METH_NOARGS, NULL },
    {(char *) "function_255", (PyCFunction) _wrap_foo_foo_function_255, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_256", (PyCFunction) _wrap_foo_foo_function_256, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_94", (PyCFunction) _wrap_foo_foo_function_94, METH_NOARGS, NULL },
    {(char *) "function_279", (PyCFunction) _wrap_foo_foo_function_279, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_93", (PyCFunction) _wrap_foo_foo_function_93, METH_NOARGS, NULL },
    {(char *) "function_344", (PyCFunction) _wrap_foo_foo_function_344, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_316", (PyCFunction) _wrap_foo_foo_function_316, METH_NOARGS, NULL },
    {(char *) "function_92", (PyCFunction) _wrap_foo_foo_function_92, METH_NOARGS, NULL },
    {(char *) "function_162", (PyCFunction) _wrap_foo_foo_function_162, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_163", (PyCFunction) _wrap_foo_foo_function_163, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_160", (PyCFunction) _wrap_foo_foo_function_160, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_161", (PyCFunction) _wrap_foo_foo_function_161, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_166", (PyCFunction) _wrap_foo_foo_function_166, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_167", (PyCFunction) _wrap_foo_foo_function_167, METH_NOARGS, NULL },
    {(char *) "function_164", (PyCFunction) _wrap_foo_foo_function_164, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_165", (PyCFunction) _wrap_foo_foo_function_165, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_272", (PyCFunction) _wrap_foo_foo_function_272, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_273", (PyCFunction) _wrap_foo_foo_function_273, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_168", (PyCFunction) _wrap_foo_foo_function_168, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_169", (PyCFunction) _wrap_foo_foo_function_169, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_276", (PyCFunction) _wrap_foo_foo_function_276, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_277", (PyCFunction) _wrap_foo_foo_function_277, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_274", (PyCFunction) _wrap_foo_foo_function_274, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_275", (PyCFunction) _wrap_foo_foo_function_275, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_180", (PyCFunction) _wrap_foo_foo_function_180, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_181", (PyCFunction) _wrap_foo_foo_function_181, METH_NOARGS, NULL },
    {(char *) "function_182", (PyCFunction) _wrap_foo_foo_function_182, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_183", (PyCFunction) _wrap_foo_foo_function_183, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_184", (PyCFunction) _wrap_foo_foo_function_184, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_185", (PyCFunction) _wrap_foo_foo_function_185, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_186", (PyCFunction) _wrap_foo_foo_function_186, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_187", (PyCFunction) _wrap_foo_foo_function_187, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_188", (PyCFunction) _wrap_foo_foo_function_188, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_189", (PyCFunction) _wrap_foo_foo_function_189, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_252", (PyCFunction) _wrap_foo_foo_function_252, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_334", (PyCFunction) _wrap_foo_foo_function_334, METH_NOARGS, NULL },
    {(char *) "function_340", (PyCFunction) _wrap_foo_foo_function_340, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_329", (PyCFunction) _wrap_foo_foo_function_329, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_341", (PyCFunction) _wrap_foo_foo_function_341, METH_NOARGS, NULL },
    {(char *) "function_179", (PyCFunction) _wrap_foo_foo_function_179, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_178", (PyCFunction) _wrap_foo_foo_function_178, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_348", (PyCFunction) _wrap_foo_foo_function_348, METH_NOARGS, NULL },
    {(char *) "function_342", (PyCFunction) _wrap_foo_foo_function_342, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_175", (PyCFunction) _wrap_foo_foo_function_175, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_174", (PyCFunction) _wrap_foo_foo_function_174, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_177", (PyCFunction) _wrap_foo_foo_function_177, METH_NOARGS, NULL },
    {(char *) "function_176", (PyCFunction) _wrap_foo_foo_function_176, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_171", (PyCFunction) _wrap_foo_foo_function_171, METH_NOARGS, NULL },
    {(char *) "function_170", (PyCFunction) _wrap_foo_foo_function_170, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_173", (PyCFunction) _wrap_foo_foo_function_173, METH_NOARGS, NULL },
    {(char *) "function_172", (PyCFunction) _wrap_foo_foo_function_172, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_265", (PyCFunction) _wrap_foo_foo_function_265, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_264", (PyCFunction) _wrap_foo_foo_function_264, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_267", (PyCFunction) _wrap_foo_foo_function_267, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_266", (PyCFunction) _wrap_foo_foo_function_266, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_261", (PyCFunction) _wrap_foo_foo_function_261, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_260", (PyCFunction) _wrap_foo_foo_function_260, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_263", (PyCFunction) _wrap_foo_foo_function_263, METH_NOARGS, NULL },
    {(char *) "function_262", (PyCFunction) _wrap_foo_foo_function_262, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_269", (PyCFunction) _wrap_foo_foo_function_269, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_268", (PyCFunction) _wrap_foo_foo_function_268, METH_NOARGS, NULL },
    {(char *) "function_312", (PyCFunction) _wrap_foo_foo_function_312, METH_NOARGS, NULL },
    {(char *) "function_193", (PyCFunction) _wrap_foo_foo_function_193, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_192", (PyCFunction) _wrap_foo_foo_function_192, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_191", (PyCFunction) _wrap_foo_foo_function_191, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_190", (PyCFunction) _wrap_foo_foo_function_190, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_197", (PyCFunction) _wrap_foo_foo_function_197, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_196", (PyCFunction) _wrap_foo_foo_function_196, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_195", (PyCFunction) _wrap_foo_foo_function_195, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_194", (PyCFunction) _wrap_foo_foo_function_194, METH_NOARGS, NULL },
    {(char *) "function_258", (PyCFunction) _wrap_foo_foo_function_258, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_199", (PyCFunction) _wrap_foo_foo_function_199, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_198", (PyCFunction) _wrap_foo_foo_function_198, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_298", (PyCFunction) _wrap_foo_foo_function_298, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_299", (PyCFunction) _wrap_foo_foo_function_299, METH_NOARGS, NULL },
    {(char *) "function_303", (PyCFunction) _wrap_foo_foo_function_303, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_290", (PyCFunction) _wrap_foo_foo_function_290, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_291", (PyCFunction) _wrap_foo_foo_function_291, METH_NOARGS, NULL },
    {(char *) "function_292", (PyCFunction) _wrap_foo_foo_function_292, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_293", (PyCFunction) _wrap_foo_foo_function_293, METH_NOARGS, NULL },
    {(char *) "function_280", (PyCFunction) _wrap_foo_foo_function_280, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_295", (PyCFunction) _wrap_foo_foo_function_295, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_296", (PyCFunction) _wrap_foo_foo_function_296, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_297", (PyCFunction) _wrap_foo_foo_function_297, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_108", (PyCFunction) _wrap_foo_foo_function_108, METH_NOARGS, NULL },
    {(char *) "function_109", (PyCFunction) _wrap_foo_foo_function_109, METH_NOARGS, NULL },
    {(char *) "function_257", (PyCFunction) _wrap_foo_foo_function_257, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_240", (PyCFunction) _wrap_foo_foo_function_240, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_238", (PyCFunction) _wrap_foo_foo_function_238, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_100", (PyCFunction) _wrap_foo_foo_function_100, METH_NOARGS, NULL },
    {(char *) "function_101", (PyCFunction) _wrap_foo_foo_function_101, METH_NOARGS, NULL },
    {(char *) "function_102", (PyCFunction) _wrap_foo_foo_function_102, METH_NOARGS, NULL },
    {(char *) "function_103", (PyCFunction) _wrap_foo_foo_function_103, METH_NOARGS, NULL },
    {(char *) "function_104", (PyCFunction) _wrap_foo_foo_function_104, METH_NOARGS, NULL },
    {(char *) "function_105", (PyCFunction) _wrap_foo_foo_function_105, METH_NOARGS, NULL },
    {(char *) "function_106", (PyCFunction) _wrap_foo_foo_function_106, METH_NOARGS, NULL },
    {(char *) "function_107", (PyCFunction) _wrap_foo_foo_function_107, METH_NOARGS, NULL },
    {(char *) "function_210", (PyCFunction) _wrap_foo_foo_function_210, METH_NOARGS, NULL },
    {(char *) "function_211", (PyCFunction) _wrap_foo_foo_function_211, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_212", (PyCFunction) _wrap_foo_foo_function_212, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_213", (PyCFunction) _wrap_foo_foo_function_213, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_214", (PyCFunction) _wrap_foo_foo_function_214, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_215", (PyCFunction) _wrap_foo_foo_function_215, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_216", (PyCFunction) _wrap_foo_foo_function_216, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_217", (PyCFunction) _wrap_foo_foo_function_217, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_218", (PyCFunction) _wrap_foo_foo_function_218, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_219", (PyCFunction) _wrap_foo_foo_function_219, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_305", (PyCFunction) _wrap_foo_foo_function_305, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_234", (PyCFunction) _wrap_foo_foo_function_234, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_310", (PyCFunction) _wrap_foo_foo_function_310, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_311", (PyCFunction) _wrap_foo_foo_function_311, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_141", (PyCFunction) _wrap_foo_foo_function_141, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_289", (PyCFunction) _wrap_foo_foo_function_289, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_288", (PyCFunction) _wrap_foo_foo_function_288, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_220", (PyCFunction) _wrap_foo_foo_function_220, METH_NOARGS, NULL },
    {(char *) "function_283", (PyCFunction) _wrap_foo_foo_function_283, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_282", (PyCFunction) _wrap_foo_foo_function_282, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_281", (PyCFunction) _wrap_foo_foo_function_281, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_231", (PyCFunction) _wrap_foo_foo_function_231, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_287", (PyCFunction) _wrap_foo_foo_function_287, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_286", (PyCFunction) _wrap_foo_foo_function_286, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_285", (PyCFunction) _wrap_foo_foo_function_285, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_284", (PyCFunction) _wrap_foo_foo_function_284, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_119", (PyCFunction) _wrap_foo_foo_function_119, METH_NOARGS, NULL },
    {(char *) "function_118", (PyCFunction) _wrap_foo_foo_function_118, METH_NOARGS, NULL },
    {(char *) "function_113", (PyCFunction) _wrap_foo_foo_function_113, METH_NOARGS, NULL },
    {(char *) "function_112", (PyCFunction) _wrap_foo_foo_function_112, METH_NOARGS, NULL },
    {(char *) "function_111", (PyCFunction) _wrap_foo_foo_function_111, METH_NOARGS, NULL },
    {(char *) "function_110", (PyCFunction) _wrap_foo_foo_function_110, METH_NOARGS, NULL },
    {(char *) "function_117", (PyCFunction) _wrap_foo_foo_function_117, METH_NOARGS, NULL },
    {(char *) "function_116", (PyCFunction) _wrap_foo_foo_function_116, METH_NOARGS, NULL },
    {(char *) "function_115", (PyCFunction) _wrap_foo_foo_function_115, METH_NOARGS, NULL },
    {(char *) "function_114", (PyCFunction) _wrap_foo_foo_function_114, METH_NOARGS, NULL },
    {(char *) "function_203", (PyCFunction) _wrap_foo_foo_function_203, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_202", (PyCFunction) _wrap_foo_foo_function_202, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_201", (PyCFunction) _wrap_foo_foo_function_201, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_200", (PyCFunction) _wrap_foo_foo_function_200, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_207", (PyCFunction) _wrap_foo_foo_function_207, METH_NOARGS, NULL },
    {(char *) "function_206", (PyCFunction) _wrap_foo_foo_function_206, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_205", (PyCFunction) _wrap_foo_foo_function_205, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_204", (PyCFunction) _wrap_foo_foo_function_204, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_324", (PyCFunction) _wrap_foo_foo_function_324, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_325", (PyCFunction) _wrap_foo_foo_function_325, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_209", (PyCFunction) _wrap_foo_foo_function_209, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_208", (PyCFunction) _wrap_foo_foo_function_208, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_320", (PyCFunction) _wrap_foo_foo_function_320, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_321", (PyCFunction) _wrap_foo_foo_function_321, METH_NOARGS, NULL },
    {(char *) "function_322", (PyCFunction) _wrap_foo_foo_function_322, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_323", (PyCFunction) _wrap_foo_foo_function_323, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_253", (PyCFunction) _wrap_foo_foo_function_253, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_239", (PyCFunction) _wrap_foo_foo_function_239, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_271", (PyCFunction) _wrap_foo_foo_function_271, METH_NOARGS, NULL },
    {(char *) "function_270", (PyCFunction) _wrap_foo_foo_function_270, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_126", (PyCFunction) _wrap_foo_foo_function_126, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_127", (PyCFunction) _wrap_foo_foo_function_127, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_124", (PyCFunction) _wrap_foo_foo_function_124, METH_NOARGS, NULL },
    {(char *) "function_125", (PyCFunction) _wrap_foo_foo_function_125, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_122", (PyCFunction) _wrap_foo_foo_function_122, METH_NOARGS, NULL },
    {(char *) "function_123", (PyCFunction) _wrap_foo_foo_function_123, METH_NOARGS, NULL },
    {(char *) "function_120", (PyCFunction) _wrap_foo_foo_function_120, METH_NOARGS, NULL },
    {(char *) "function_121", (PyCFunction) _wrap_foo_foo_function_121, METH_NOARGS, NULL },
    {(char *) "function_236", (PyCFunction) _wrap_foo_foo_function_236, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_237", (PyCFunction) _wrap_foo_foo_function_237, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_221", (PyCFunction) _wrap_foo_foo_function_221, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_235", (PyCFunction) _wrap_foo_foo_function_235, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_232", (PyCFunction) _wrap_foo_foo_function_232, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_233", (PyCFunction) _wrap_foo_foo_function_233, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_128", (PyCFunction) _wrap_foo_foo_function_128, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_129", (PyCFunction) _wrap_foo_foo_function_129, METH_NOARGS, NULL },
    {(char *) "function_339", (PyCFunction) _wrap_foo_foo_function_339, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_338", (PyCFunction) _wrap_foo_foo_function_338, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_337", (PyCFunction) _wrap_foo_foo_function_337, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_336", (PyCFunction) _wrap_foo_foo_function_336, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_335", (PyCFunction) _wrap_foo_foo_function_335, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_330", (PyCFunction) _wrap_foo_foo_function_330, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_333", (PyCFunction) _wrap_foo_foo_function_333, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_332", (PyCFunction) _wrap_foo_foo_function_332, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_331", (PyCFunction) _wrap_foo_foo_function_331, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "function_259", (PyCFunction) _wrap_foo_foo_function_259, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef foo_moduledef = {
    PyModuleDef_HEAD_INIT,
    "foo",
    NULL,
    -1,
    foo_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(foo)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&foo_moduledef);
    #else
    m = Py_InitModule3((char *) "foo", foo_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    return MOD_RETURN(m);
}
